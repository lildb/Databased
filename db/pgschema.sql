DROP DATABASE reviews;

CREATE DATABASE reviews;

\c reviews;

CREATE TABLE products (
  id INT PRIMARY KEY NOT NULL,
  quality INT,
  size INT,
  width INT,
  fit INT,
  length INT,
  comfort INT
);

CREATE TEMP TABLE importreviews (
  review_id INT,
  product_id INT,
  rating SMALLINT,
  date BIGINT,
  summary TEXT,
  body TEXT,
  recommend BOOLEAN DEFAULT TRUE,
  reported BOOLEAN DEFAULT FALSE,
  reviewer_name TEXT,
  reviewer_email TEXT,
  response TEXT DEFAULT NULL,
  helpfulness SMALLINT DEFAULT 0
);

\copy importreviews from './csv/reviews.csv' delimiter ',' csv header;

INSERT INTO products (id)
SELECT DISTINCT product_id
FROM importreviews
ORDER BY product_id ASC;


CREATE TABLE list (
  review_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  product_id INT REFERENCES products(id),
  rating SMALLINT NOT NULL,
  date TIMESTAMPTZ,
  summary VARCHAR(120) NOT NULL,
  body VARCHAR(480),
  response VARCHAR(110),
  recommend BOOLEAN,
  reviewer_name VARCHAR(30) NOT NULL,
  reviewer_email VARCHAR(40) NOT NULL,
  helpfulness SMALLINT,
  reported BOOLEAN
);

INSERT INTO list
SELECT review_id,
product_id,
rating,
date_trunc('day', to_timestamp(date / 1000) AT TIME ZONE 'UTC'),
summary,
body,
response,
recommend,
reviewer_name,
reviewer_email,
helpfulness,
reported
FROM importreviews
ORDER BY review_id ASC;

DROP TABLE importreviews;

CREATE INDEX rp_idx ON list (product_id, review_id, date, helpfulness);


CREATE TABLE photos (
  id INT PRIMARY KEY NOT NULL,
  url VARCHAR(160),
  review_id INT REFERENCES list(review_id)
);

CREATE TEMP TABLE importphotos (
  id INT,
  review_id INT,
  url TEXT
);


\copy importphotos from './csv/reviews_photos.csv' delimiter ',' csv header;

INSERT INTO photos (id, review_id, url)
SELECT id, review_id, url
FROM importphotos;

DROP TABLE importphotos;

CREATE INDEX rph_idx ON photos (review_id, id);


CREATE OR REPLACE VIEW photos_json AS SELECT p.review_id, COALESCE (
json_agg(json_build_object( 'id', p.id, 'url', url))
FILTER (WHERE url IS NOT NULL),
'[]' ) photos_array --will this change column header?
FROM photos p
GROUP BY p.review_id;


CREATE TYPE spec AS ENUM (
  'Quality','Size','Width','Fit','Length','Comfort'
);

CREATE TABLE IF NOT EXISTS specs (
  id INT PRIMARY KEY NOT NULL,
  product_id INT NOT NULL REFERENCES products(id),
  name spec
);

CREATE TEMP TABLE importspecs (
  id INT,
  product_id INT,
  name VARCHAR
);

\copy importspecs from './csv/characteristics.csv' delimiter ',' csv header;

INSERT INTO specs
  SELECT s.id, product_id, name::spec
  FROM importspecs s
  JOIN products p
  ON s.product_id=p.id;

CREATE INDEX s_idx ON specs (product_id, id);

CREATE TABLE IF NOT EXISTS spec_reviews (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  characteristic_id INT REFERENCES specs(id),
  review_id INT REFERENCES list(review_id),
  value SMALLINT
);

CREATE TEMP TABLE importspecreviews (
  id BIGINT,
  characteristic_id INT,
  review_id INT,
  value INT
);

\copy importspecreviews from './csv/characteristic_reviews.csv' delimiter ',' quote '"' csv header;

INSERT INTO spec_reviews
  SELECT s.id, characteristic_id, review_id, value
  FROM importspecreviews s;

DROP TABLE importspecreviews;

CREATE INDEX s_avg ON spec_reviews (characteristic_id);




CREATE OR REPLACE VIEW spec_avgs AS
  SELECT sr.characteristic_id, avg(value) AS value
  FROM spec_reviews sr
  GROUP BY sr.characteristic_id
  ORDER BY sr.characteristic_id;

CREATE OR REPLACE VIEW product_specs AS
  SELECT product_id, name, s.id FROM specs s
  GROUP BY product_id, s.id, name
  ORDER BY product_id;


CREATE MATERIALIZED VIEW meta_specs AS
SELECT * FROM product_specs ps
FULL OUTER JOIN spec_avgs sa
ON sa.characteristic_id=ps.id
ORDER BY product_id;

CREATE INDEX s_m_idx ON meta_specs (product_id, id);

CREATE OR REPLACE VIEW meta_specs_object AS
SELECT product_id, json_object_agg(name, averages) AS characteristics
FROM (SELECT json_build_object('id', id, 'value', value) averages, product_id, name
FROM (SELECT product_id, name, id, value from meta_specs) foo GROUP BY product_id, name, id, value) bar
GROUP BY product_id;

CREATE OR REPLACE VIEW meta_rate AS
  SELECT product_id,
  jsonb_object_agg(rating, count) AS ratings
  FROM (SELECT product_id, rating, count(*)
  FROM list
  GROUP BY product_id, rating) foo
  GROUP BY product_id
  ORDER BY product_id;


CREATE OR REPLACE VIEW meta_rec AS
  SELECT product_id,
  jsonb_object_agg(recommend, count) AS recommended
  FROM (SELECT product_id, recommend, count(*)
  FROM list
  GROUP BY product_id, recommend) foo
  GROUP BY product_id
  ORDER BY product_id;

CREATE OR REPLACE VIEW meta_all AS
  SELECT meta_rec.product_id, ratings, recommended,
  characteristics FROM meta_rate rate

  RIGHT JOIN meta_rec
  ON rate.product_id=meta_rec.product_id

  RIGHT JOIN meta_specs_object
  ON rate.product_id=meta_specs_object.product_id;



/*  Execute this file from the command line by typing:

psql postgres -f ./server/db/pgschema.sql

 */
