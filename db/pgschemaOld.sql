DROP DATABASE reviews;

CREATE DATABASE reviews;

\c reviews;

CREATE SCHEMA IF NOT EXISTS reviews;


CREATE TABLE reviews.products (
  id INT PRIMARY KEY NOT NULL,
  quality INT,
  size INT,
  width INT,
  fit INT,
  length INT,
  comfort INT
);

CREATE TEMP TABLE importreviews (
  review_id INT,
  product_id INT,
  rating SMALLINT,
  date BIGINT,
  summary TEXT,
  body TEXT,
  recommend BOOLEAN DEFAULT TRUE,
  reported BOOLEAN DEFAULT FALSE,
  reviewer_name TEXT,
  reviewer_email TEXT,
  response TEXT DEFAULT NULL,
  helpfulness SMALLINT DEFAULT 0
);

\copy importreviews from './csv/reviews.csv' delimiter ',' csv header;

INSERT INTO reviews.products (id)
SELECT DISTINCT product_id
FROM importreviews
ORDER BY product_id ASC;

CREATE TABLE reviews.list (
  review_id INT GENERATED BY DEFAULT AS IDENTITY,
  product_id INT REFERENCES reviews.products(id),
  rating SMALLINT NOT NULL,
  date TIMESTAMPTZ,
  summary VARCHAR(120) NOT NULL,
  body VARCHAR(480),
  response VARCHAR(110),
  recommend BOOLEAN,
  reviewer_name VARCHAR(30) NOT NULL,
  reviewer_email VARCHAR(40) NOT NULL,
  helpfulness SMALLINT,
  reported BOOLEAN
);

INSERT INTO reviews.list
SELECT review_id,
product_id,
rating,
date_trunc('day', to_timestamp(date / 1000) AT TIME ZONE 'UTC'),
summary,
body,
response,
recommend,
reviewer_name,
reviewer_email,
helpfulness,
reported
FROM importreviews
ORDER BY review_id ASC;

DROP TABLE importreviews;

CREATE INDEX rp_idx ON reviews.list (product_id, review_id, date, helpfulness);


CREATE TABLE reviews.photos (
  id INT PRIMARY KEY NOT NULL,
  url VARCHAR(160),
  review_id INT REFERENCES reviews.list(review_id)
);

CREATE TEMP TABLE importphotos (
  id INT,
  review_id INT,
  url TEXT
);

\copy importphotos from './csv/reviews_photos.csv' delimiter ',' csv header;

INSERT INTO reviews.photos (id, review_id, url)
SELECT id, review_id, url
FROM importphotos;

DROP TABLE importphotos;

CREATE INDEX rph_idx ON reviews.photos (review_id, id);

CREATE OR REPLACE VIEW photos_json AS SELECT p.review_id, COALESCE (
json_agg(json_build_object( 'id', p.id, 'url', url))
FILTER (WHERE url IS NOT NULL),
'[]' ) photos
FROM reviews.photos p
GROUP BY p.review_id;

CREATE OR REPLACE VIEW reviews.meta AS
  SELECT product_id,
  jsonb_object_agg(rating, count) AS ratings,
  jsonb_object_agg(recommend, count) AS recommended
  FROM (SELECT product_id, rating, recommend, count(*)
  FROM reviews.list
  GROUP BY product_id, rating, recommend) foo
  GROUP BY product_id
  ORDER BY product_id;

CREATE TYPE spec AS ENUM (
  'Quality','Size','Width','Fit','Length','Comfort'
);

CREATE TABLE IF NOT EXISTS reviews.specs (
  id INT PRIMARY KEY NOT NULL,
  product_id INT NOT NULL REFERENCES reviews.products(id),
  name spec
);

CREATE TEMP TABLE importspecs (
  id INT,
  product_id INT,
  name VARCHAR
);

\copy importspecs from './csv/characteristics.csv' delimiter ',' csv header;

INSERT INTO reviews.specs
  SELECT s.id, product_id, name::spec
  FROM importspecs s
  JOIN reviews.products p
  ON s.product_id=p.id;

CREATE INDEX s_idx ON reviews.specs (product_id, id);

CREATE TABLE IF NOT EXISTS reviews.spec_reviews (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  characteristic_id INT REFERENCES reviews.specs(id),
  review_id INT REFERENCES reviews.list(review_id),
  value SMALLINT
);

CREATE TEMP TABLE importspecreviews (
  id BIGINT,
  characteristic_id INT,
  review_id INT,
  value INT
);

\copy importspecreviews from './csv/characteristic_reviews.csv' delimiter ',' quote '"' csv header;

INSERT INTO reviews.spec_reviews
  SELECT s.id, characteristic_id, review_id, value
  FROM importspecreviews s;

DROP TABLE importspecreviews;

CREATE INDEX s_avg ON reviews.spec_reviews (characteristic_id);


CREATE OR REPLACE VIEW spec_avgs AS
  SELECT r.characteristic_id, avg(value) AS value
  FROM reviews.spec_reviews r
  GROUP BY r.characteristic_id
  ORDER BY r.characteristic_id;

CREATE OR REPLACE VIEW product_specs AS
  SELECT product_id, name, s.id FROM reviews.specs s
  GROUP BY product_id, s.id, name
  ORDER BY product_id;


CREATE MATERIALIZED VIEW specs_meta AS
SELECT * FROM product_specs ps
FULL OUTER JOIN spec_avgs sa
ON sa.characteristic_id=ps.id
ORDER BY product_id;

CREATE INDEX s_m_idx ON specs_meta (product_id, id);

CREATE OR REPLACE VIEW specs_object AS
SELECT product_id, json_object_agg(name, averages) characteristics
FROM (SELECT json_build_object('id', id, 'value', value) averages, product_id, name
FROM (SELECT product_id, name, id, value from specs_meta) foo GROUP BY product_id, name, id, value) bar
GROUP BY product_id;

-- returns product_id, name, spec id, characteristic_id avg


CREATE OR REPLACE VIEW meta_rate AS
  SELECT product_id,
  jsonb_object_agg(rating, count) AS ratings
  FROM (SELECT product_id, rating, count(*)
  FROM reviews.list
  GROUP BY product_id, rating) foo
  GROUP BY product_id
  ORDER BY product_id;


CREATE OR REPLACE VIEW meta_rec AS
  SELECT product_id,
  jsonb_object_agg(recommend, count) AS recommended
  FROM (SELECT product_id, recommend, count(*)
  FROM reviews.list
  GROUP BY product_id, recommend) foo
  GROUP BY product_id
  ORDER BY product_id;


CREATE OR REPLACE VIEW meta_all AS
  SELECT product_id,
  ratings FROM meta_rate r

  RIGHT JOIN meta_rec.recommended
  ON r.product_id=meta_rec.product_id

  RIGHT JOIN specs_object.characteristics
  ON r.product_id=specs_object.product_id

-- incorporate into reviews.meta ...TO DO

/* FOR REFERENCE

CREATE OR REPLACE VIEW product_spec_object AS
  SELECT product_id, jsonb_object_agg(json_build_object(name, json_build_object(('id', id), ('value', avg))) ) as characteristics
  FROM (SELECT product_id, s.id, name, avg(value)
  FROM reviews.specs s
  JOIN reviews.spec_reviews r
  ON s.id=r.characteristic_id
  GROUP BY product_id, name, s.id) baz
  GROUP BY product_id;






  "characteristics": {
      "Fit": {
          "id": 206732,
          "value": "3.0833333333333333"
      }

-- CREATE OR REPLACE VIEW reviews.meta AS
-- SELECT product_id,
-- jsonb_object_agg(rating, count) AS ratings,
-- jsonb_object_agg(recommend, count) AS recommended
-- FROM (SELECT product_id, rating, recommend, count(*)
-- FROM reviews.list
-- GROUP BY product_id, rating, recommend) foo
-- GROUP BY product_id
-- ORDER BY product_id;

*/


/*  Execute this file from the command line by typing:


psql -U ciele postgres -f ./db/pgschemaNew.sql

  *  to create the database, schema, and the tables.
  *  note: opens to database 'postgres' then \c to database 'reviews'

  head -7 answers_photos.csv

*/


/*

from EC2:

sudo -u postgres psql -f ./db/pgschemaNew.sql

*/

-- returns rows that need to be transformed to json but cannot group characteristics in json format

SELECT rat.product_id ,
  ratings, recommended, characteristics FROM meta_rate rat

   JOIN meta_rec rec
  ON rat.product_id=rec.product_id
JOIN spec_object spec  ON spec.product_id= rat.product_id where rat.product_id=12356;