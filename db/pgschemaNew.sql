DROP DATABASE reviews;

CREATE DATABASE reviews;

\c reviews;

SET TIME ZONE 'UTC';

CREATE SCHEMA IF NOT EXISTS reviews AUTHORIZATION ciele;

CREATE TABLE reviews.products (
  id INT PRIMARY KEY NOT NULL,
  ratings REAL,
  reviews INT

  -- characteristics TEXT, -- fix this
  -- _1 SMALLINT,
  -- _2 SMALLINT,
  -- _3 SMALLINT,
  -- _4 SMALLINT,
  -- _5 SMALLINT,
  -- recommended SMALLINT -- fix this
  -- --key value, store / ints?
  -- recommended_f SMALLINT,
  -- quality SMALLINT,
  -- size SMALLINT,
  -- width SMALLINT,
  -- fit SMALLINT,
  -- len SMALLINT,
  -- comfort SMALLINT

);


CREATE TEMP TABLE importreviews (
  id INT,
  product_id INT,
  rating SMALLINT,
  date BIGINT,
  summary TEXT,
  body TEXT,
  recommend BOOLEAN,
  reported BOOLEAN,
  reviewer_name TEXT,
  reviewer_email TEXT,
  response TEXT,
  helpfulness SMALLINT DEFAULT 0
);

\copy importreviews from './csv/reviews.csv' delimiter ',' csv header;

INSERT INTO reviews.products (id)
SELECT DISTINCT product_id
FROM importreviews
ORDER BY product_id;


CREATE TABLE reviews.list (
  id INT PRIMARY KEY NOT NULL,
  product_id INT REFERENCES reviews.products,
  rating SMALLINT NOT NULL,
  date TIMESTAMPTZ,
  summary VARCHAR(120) NOT NULL,
  body VARCHAR(480),
  recommend BOOLEAN,
  reported BOOLEAN,
  reviewer_name VARCHAR(30) NOT NULL,
  reviewer_email VARCHAR(40) NOT NULL,
  response VARCHAR(110),
  helpfulness SMALLINT DEFAULT 0,
  photos INT[]
);

INSERT INTO reviews.list (id, product_id, rating, date, summary, body, recommend, reported, reviewer_name, reviewer_email, response, helpfulness)
SELECT id, product_id, rating, to_timestamp(date / 1000), summary, body, recommend, reported, reviewer_name, reviewer_email, response, helpfulness
FROM importreviews;



CREATE TABLE reviews.reviews_products (
  rp_idx INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  review_id INT,
  product_id INT,
  -- photos INT[],
  FOREIGN KEY (review_id) REFERENCES reviews.list(id),
  FOREIGN KEY (product_id) REFERENCES reviews.products(id)
); -- good
--to try: create index on reviews.list and photos joined by review_id


INSERT INTO reviews.reviews_products (review_id, product_id)
SELECT id, product_id from reviews.list;


CREATE TABLE reviews.photos (
  id INT PRIMARY KEY NOT NULL,
  url VARCHAR(160),
  review_id INT REFERENCES reviews.list(id)
  -- CREATE INDEX ON (review_id, id)
);


CREATE TEMP TABLE importphotos (
  id INT,
  review_id INT,
  url TEXT
);


\copy importphotos from './csv/reviews_photos.csv' delimiter ',' csv header;

INSERT INTO reviews.photos (id, review_id, url)
SELECT id, review_id, url
FROM importphotos;




-- INSERT INTO reviews.products (ratings)
-- SELECT reviews.products.id, avg(reviews.list.rating)
-- FROM reviews.list
-- GROUP BY reviews.products.id, reviews.list.product_id;


-- //////////////


-- CREATE TABLE IF NOT EXISTS reviews.traits (
--   id INT PRIMARY KEY NOT NULL,
--   -- product_id INT NOT NULL REFERENCES reviews.list(product_id),
--   product_id INT NOT NULL,
--   name VARCHAR(10) NOT NULL
-- );

-- CREATE TEMP TABLE importtraits (
--   id INT,
--   product_id INT,
--   name VARCHAR
-- );

-- \copy importtraits from './csv/characteristics.csv' delimiter ',' csv header;

-- INSERT INTO reviews.traits SELECT id, product_id, name FROM importtraits;




-- CREATE TABLE IF NOT EXISTS reviews.trait_reviews (
--   id INT PRIMARY KEY NOT NULL,
--   -- characteristic_id INT NOT NULL REFERENCES reviews.list(product_id),
--   characteristic_id INT NOT NULL,
--   review_id INT NOT NULL REFERENCES reviews.list(id),
--   value SMALLINT
-- );


-- CREATE TEMP TABLE importtraitsreviews (
--   id INT,
--   characteristic_id INT,
--   review_id INT,
--   value INT
-- );


-- \copy importtraitsreviews from './csv/characteristic_reviews.csv' delimiter ',' quote '"'csv header;

-- INSERT INTO reviews.trait_reviews SELECT id, characteristic_id, review_id, value FROM importtraitsreviews;


-- CREATE TABLE IF NOT EXISTS reviews.meta (
--   id INT PRIMARY KEY NOT NULL,
--   rating real
-- );

-- INSERT INTO reviews.meta (product_id) SELECT DISTINCT product_id from reviews.list ORDER BY product_id;
-- INSERT INTO reviews.meta (rating) SELECT avg(rating) from reviews.list WHERE (product_id=(SELECT product_id from reviews.meta));




/*  Execute this file from the command line by typing:


psql -U ciele postgres -f ./db/pgschemaNew.sql

  *  to create the database, schema, and the tables.
  *  note: opens to database 'postgres' then \c to database 'reviews'

  head -7 answers_photos.csv

 */

